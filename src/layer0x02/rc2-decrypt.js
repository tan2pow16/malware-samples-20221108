'use strict';

/*
 * Copyright (c) 2022, Tangent65536.
 *  All rights reserved.
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

function __main__(args)
{
  if(args.length < 2)
  {
    console.log(`Usage: node ${__filename} <path/to/sample> <passwd>`);
    return;
  }

  let passwd = args[1];

  let path_in = path.resolve(args[0]);
  let dir_in = path.resolve(args[0], '..');
  let filename = path.basename(path_in);
  
  let content = fs.readFileSync(path_in).reverse();
  if(content.readUInt16LE(0) === 0x7830)
  {
    content = content.subarray(2);
  }
  else
  {
    console.error('Invalid AutoIt hex literal. Abort.');
    return;
  }
  let buf = Buffer.from(content.toString('utf8'), 'hex');

  let key = crypto.createHash('MD5').update(Buffer.from(passwd, 'ascii')).digest();
  let iv = Buffer.allocUnsafe(8);
  iv.fill(0);

  let decipher = crypto.createDecipheriv('rc2-cbc', key, iv);
  let data = Buffer.concat([decipher.update(buf), decipher.final()]);

  let idx = filename.lastIndexOf('.');
  if(idx >= 0)
  {
    filename = `${filename.substring(0, idx)}.exe`;
  }
  fs.writeFileSync(`${dir_in}/${filename}`, data);
}

if(require.main === module)
{
  process.on('uncaughtException', function(err) {
    console.error(err);
  });
  
  __main__(process.argv.slice(2));
}
